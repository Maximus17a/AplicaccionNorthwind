@model NorthwindSalesAnalysis.Models.ViewModels.ProductSalesViewModel

@{
    ViewData["Title"] = "Ventas por Producto";
}

<div class="container-fluid">
    <h1 class="mb-4"><i class="bi bi-box me-2"></i>@ViewData["Title"]</h1>

    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Filtros</h5>
                </div>
                <div class="card-body">
                    <form asp-action="ProductSales" method="get" class="row">
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Fecha inicio</label>
                            <input type="date" name="startDate" class="form-control" value="@(Model.StartDate?.ToString("yyyy-MM-dd"))" />
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Fecha fin</label>
                            <input type="date" name="endDate" class="form-control" value="@(Model.EndDate?.ToString("yyyy-MM-dd"))" />
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Categoría</label>
                            <select name="categoryId" class="form-select">
                                <option value="">Todas las categorías</option>
                                @foreach (var category in Model.AvailableCategories)
                                {
                                    <option value="@category.CategoryId" selected="@(Model.CategoryId == category.CategoryId)">
                                        @category.CategoryName
                                    </option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3 d-flex align-items-end mb-3">
                            <button type="submit" class="btn btn-primary me-2">
                                <i class="bi bi-search me-1"></i>Filtrar
                            </button>
                            <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                                <i class="bi bi-download me-1"></i>Exportar
                            </button>
                            <ul class="dropdown-menu">
                                <li>
                                    <button type="button" class="dropdown-item" onclick="exportReport('pdf')">
                                        <i class="bi bi-file-pdf me-2"></i>Exportar como PDF
                                    </button>
                                </li>
                                <li>
                                    <button type="button" class="dropdown-item" onclick="exportReport('excel')">
                                        <i class="bi bi-file-excel me-2"></i>Exportar como Excel
                                    </button>
                                </li>
                            </ul>
                            <form id="exportForm" method="post" style="display:none;">
                                <input type="hidden" name="reportType" value="product" />
                                <input type="hidden" name="startDate" value="@Model.StartDate?.ToString("yyyy-MM-dd")" />
                                <input type="hidden" name="endDate" value="@Model.EndDate?.ToString("yyyy-MM-dd")" />
                                <input type="hidden" name="categoryId" value="@Model.CategoryId" />
                            </form>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Gráfico de Ventas por Producto</h5>
                </div>
                <div class="card-body">
                    <canvas id="productSalesChart" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Detalle de Ventas por Producto</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-primary">
                                <tr>
                                    <th>Producto</th>
                                    <th>Categoría</th>
                                    <th class="text-end">Precio Unitario</th>
                                    <th class="text-end">Cantidad Vendida</th>
                                    <th class="text-end">Ingresos Totales</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var product in Model.ProductSales)
                                {
                                    <tr>
                                        <td>@product.ProductName</td>
                                        <td>@product.CategoryName</td>
                                        <td class="text-end">$@product.UnitPrice.ToString("N2")</td>
                                        <td class="text-end">@product.TotalQuantity</td>
                                        <td class="text-end">$@product.TotalRevenue.ToString("N2")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function initProductSalesChart(data) {
            // Ordenar los datos por ingresos totales (descendente)
            data.sort((a, b) => b.totalRevenue - a.totalRevenue);

            // Limitar a los 10 principales productos para mejor visualización
            const topProducts = data.slice(0, 10);

            // Preparar datos para el gráfico
            const labels = topProducts.map(p => p.productName);
            const totalRevenueData = topProducts.map(p => p.totalRevenue);
            const totalQuantityData = topProducts.map(p => p.totalQuantity);

            // Obtener el contexto del canvas
            const ctx = document.getElementById('productSalesChart').getContext('2d');

            // Crear el gráfico
            const productSalesChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Ingresos Totales ($)',
                            data: totalRevenueData,
                            backgroundColor: 'rgba(75, 192, 192, 0.7)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1,
                            yAxisID: 'y'
                        },
                        {
                            label: 'Cantidad Vendida',
                            data: totalQuantityData,
                            backgroundColor: 'rgba(153, 102, 255, 0.7)',
                            borderColor: 'rgba(153, 102, 255, 1)',
                            borderWidth: 1,
                            type: 'line',
                            yAxisID: 'y1'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Top 10 Productos por Ingresos',
                            font: {
                                size: 16
                            }
                        },
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.datasetIndex === 0) {
                                        label += '$' + context.raw.toFixed(2);
                                    } else {
                                        label += context.raw;
                                    }
                                    return label;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            ticks: {
                                maxRotation: 45,
                                minRotation: 45
                            }
                        },
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Ingresos Totales ($)'
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            grid: {
                                drawOnChartArea: false
                            },
                            title: {
                                display: true,
                                text: 'Cantidad Vendida'
                            }
                        }
                    }
                }
            });
        }

        // Función para exportar informe
        function exportReport(format) {
            const form = document.getElementById('exportForm');
            if (format === 'pdf') {
                form.action = '@Url.Action("ExportToPdf", "Reports")';
            } else {
                form.action = '@Url.Action("ExportToExcel", "Reports")';
            }
            form.submit();
        }

        // Inicializar el gráfico con los datos del modelo
        document.addEventListener('DOMContentLoaded', function() {
            const productData = @Html.Raw(Json.Serialize(Model.ProductSales.Take(10)));
            initProductSalesChart(productData);
        });
    </script>
}